BigMac
BigMac2003$BigMac
rownames(BigMac2003)
BigMac2003[41,]
BigMac2003[,1]
View(BigMac2003)
hist(TeachNI, main="Teachers Net Income (in $1000's)")
hist(TeachNI,breaks=15, main="Teachers Net Income (in $1000s)")
hist(TeachNI, main="Teachers Net Income (in $1000's)")
hist(TeachNI,breaks=15, main="Teachers Net Income (in $1000s)")
summary(BigMac2003)
mean(TeachNI)
sd(TeachNI)
sd(TeachNI)^2
new<-c("red","green","blue")
new
## The idea here is the c() function says keep these values together.  We refer to new as a vector.  If we want to get the first value of new we type
new[1]
data<-read.csv(file.choose(),header=TRUE)
dim(data)
head(data)
summary(data)
BigMac
detach(BigMac)
detach(BigMac2003)
BigMac
head(state.x77)
sub_africa_u5mr <- read.csv("~/Desktop/2015Fall_d3/theopenwindow/week10/sub_africa_u5mr.csv")
View(sub_africa_u5mr)
library(reshape)
mdata<- melt(sub_africa_u5mr, id=c("Country.Name","Year","Value"))
mdata<- meat(sub_africa_u5mr)
mdata<- melt(sub_africa_u5mr)
stack(mdata)
reshape(mydata)
reshape(mdata)
reshape(mdata,idvar="Country.Name", timevar="time", direction="long")
reshape(mdata, idvar="Country.Code", v.names=c("x"),direction=wide)
> reshape(mdata, idvar="Country.Code", v.names=c("x"),direction="wide")
melt(sub_africa_u5mr);
mdata <- melt(sub_africa_u5mr)
View(sub_africa_u5mr)
aql <- melt(sub_africa_u5mr)
head(aql)
tail(aql)
aql<-melt(sub_africa_u5mr, id.vars=c("Country.Name", "variable"))
aql<-melt(sub_africa_u5mr, id.vars=c("Country.Name", "Year"))
View(aql)
View(aql)
View(aql)
export(aql)
View(aql)
csv(aql)
View(aql)
write.csv(aql)
write.xls(aql)
package(xml)
write.csv(aql, "aql.csv")
library(tm)
install.packages("tm")
install.packages("XML")
install.packages("NLP")
install.packages("XML")
install.packages("RCurl")
install.packages("bitops")
library(tm)
library(tm)
library(XML)
library(RCurl)
Sys.time()
cyurl="http://money.cnn.com/data/markets/dow/?order=d"
doc = cydoc = cy = htmlParse(cyurl)
node = getNodeSet(cydoc, "//div[@class = 'wsod_containerSpacing']")
node
xmlValue)
info = xpathSApply(cydoc, "//div[@class='wsod_containerSpacing'][1]/div",
xmlValue)
info
node = getNodeSet(cydoc, "//div[@class = 'wsod_containerSpacing']")[[2]]
node
node
cyurl.table = readHTMLTable(cyurl, header = T)
cyurl.table
node.talbe
cyurl.talbe = readHTMLTable(cyurl, which=2)
cyurl.table = readHTMLTable(cyurl, which=2)
cyurl.table
cyurl.table = readHTMLTable(cyurl, which=3)
cyurl.table
cyurl.table = readHTMLTable(cyurl, which=4)
cyurl.table
doc = htmlParse(txt, asText = TRUE)
doc = htmlParse(cyurl, "//a[@rel='next']/@href")
doc
doc = readHTMLTable(cyurl, "//a[@rel='next']/@href")
doc
doc = readHTMLTable(cyurl, "//a[@rel='next']/@href")[[4]]
doc
head(cyurl.table)
header <- head(cyurl.table)
header
dimension <- dim(cyurl.table)
dimension
page1 <- cyurl.table
page1
page2 <- doc
page2
allTable <- rbind(page1,page2)
page2 <- readHTMLTable(cyurl, "//a[@rel='next']/@href", header = T)[[4]]
page2 < readHTMLTable(cyurl, header = T, "//a[@rel='next']/@href")[[4]]
page2 <- readHTMLTable(cyurl, header = T, "//a[@rel='next']/@href")[[4]]
page 2< - readHTMLTable(cyurl, "//a[@rel='next']/@href")[[4]]
page2
page2
allTable <- merge(page1, page2)
allTable
page2 <- readHTMLTable("http://money.cnn.com/data/markets/dow/?order=d&page=2", header = T)[[4]]
page2
totalTable <- rbind(page1,page2)
totalTable
header <- head(totalTable)
header
dimension <- dim(totalTable)
dimension
colsplit(gsub("([A-Z])", "(^[A-Z][a-z]+)", variable),"\\.", c("Stock Symbol", "Company"))
result = strsplit(totalTable, "[A-Z]", "^[A-Z][a-z]+",variable),"\\.", c("Stock Symbol", "Company")
result = strsplit(totalTable,"[A-Z]","^[A-Z][a-z]+")
result
Company = str_extract(variable,"(^[A-Z][a-z]+)"))
Company = str_extract(variable,"(^[A-Z][a-z]+)"))
data.frame
result = data.frame(totalTable)
result
typeof(totalTable)
class(totalTable)
mode(totalTable)
str(totalTable)
is.Matrics(totalTable)
names(totalTable)
is.data.frame(totalTable)
is.list(totalTable)
totalTable$Company
is.na(total$Price)
is.na(totalTable$Price)
is.number(totalTable$Price)
attach(totalTable)
rownames(totalTable)
totalTable[2,]
totalTable[,10]
totalTable[,5]
hist(totalTable)
summary(totalTable)
is.matrix(totalTable)
attr(totalTable)
class(totalTable$Price)
class(totalTable$Company)
mode(totalTable$Price)
attr(totalTable$Price)
class(totalTable[2,])
class(totalTable[10,])
mode(totalTable[10,])
mode(totalTalbe[2,])
mode(totalTable[2,])
class(totalTable[2,2])
mode(totalTable[2,2])
class(totalTable[2,3])
totalTable[2,2]
totalTable
totalTable[,5]
totalTable[,4]
totalTable[2,4]
class(totalTable[2,4])
mode(totalTable[2,4])
library(XML)
library(XML)
library(XML)
library(XML)
page1 <- readHTMLTable("http://money.cnn.com/data/markets/dow/?order=d", head =T)[[4]]
page1
page2 <- readHTMLTable("http://money.cnn.com/data/markets/dow/?order=d&page=2", head=T)[[4]]
page2
totalTable<-merge(page1,page2)
totalTable
##2) Describe the structure and class of each element of this list.
cyurl="http://money.cnn.com/data/markets/dow/?order=d"
cyurl.table = readHTMLTable(cyurl, which=4)
cyurl.table
page1 <- cyurl.table
page1
page2 <- readHTMLTable("http://money.cnn.com/data/markets/dow/?order=d&page=2", header = T)[[4]]
page2
totalTable <- rbind(page1,page2)
totalTable
header <- head(totalTable)
header
dimension <- dim(totalTable)
dimension
##2) Describe the structure and class of each element of this list.
class(totalTable)
class(totalTable[,2])
class(totalTable[2,])
class(totalTable[5,])
class(totalTable[1,])
class(totalTable[,1])
class(totalTable$Price)
class(totalTable[2,2])
class(totalTable[2,3])
totalTable[2,6]## Each column is a factor, and each row is a data.frame.
class(totalTable[2,6])
totalTable$YTDchange
YTDchange<-totalTable$YTDchange
YTDchangeas.numeric(gsub("[\\$|,]","",Dollars))
YTDchange
as.numeric(gsub("[\\%,]","",YTDchange))
mean(YTDchange)
numYTDchange<-as.numeric(gsub("[\\%,]","",YTDchange))
numYTDchange
mean(numYTDchange)
Price<-totalTable$Price
Price
mean(Price)
numPrice<-as.numeric(gsub("[\\$,]","",Price))
numPrice
mean(numPrice)
state.name
nchar(state.name)
x=4
y=3
cat("when we define x=",x,"it should be greater than y=",y)
paste(1,"two","tres")
paste(c(1,"two","tres"),collapse=" ")
paste(c(1,"two","tres"),collapse=", ")
paste("X",1:3,collapese=" ")
paste(c("X","Y"),1:3,collapse=" ")
paste(c("X","Y"),1:3,sep="", collapse=" ")
paste(c("X","Y"),1:3,sep="_",collapse="|")
substring(state.name,2,6)
MyStr<-"Miami Hurricanes"
substring(MyStr,c(1,7),c(5,16))
expr=".*\\.txt"
nchar(expr)
cat(expr,"\n","Red")
strs=c("Chicken","Cat","Dog")
expr=paste(strs, collapse="|")
MySent<-c("The Miami Hurricanes beat the North Carolina Tar Heels.", "Minnesota had a bye week.")
result=strsplit(MySent," ")
sapply(result,length)
allTerms=unlist(result)
allTerms
help(grep)
company<-totalTable$Company
company
substring(company,^[A-Z]+,^[A-Z][a-z]+)
substring(company,[A-Z],[a-z])
substring(company,"[A-Z]","[a-z]")
company
Find=regexpr("[A-Z]+",company)
Find
Find=regexpr("^[A-Z]+",company)
Find
Com=substring(company,Find,Find+attr(company,"match.length"))
substr(price,"[A-Z]","[A-Z]")
substr(company,"[A-Z]","[A-Z]")
library(tidyr)
Both<-regexpr("[A-Z]+|[a-z]+",company)
Both
Again<-substring(company,Both,Both+attr(Both,"match.length"))
Again
library("RMySQL")
company
Res=substring(allTerms,Find,Find+attr(Find,"match.length"))
Res
Res=substring(allTerms,Find,Find+attr(Find,"match.length"-1))
Res=substring(allTerms,Find,Find+attr(Find,"match.length")-1)
Res
Symbol<-regexpr("[A-Z]+|[a-z]+",company)
Symbol<-substring(company,Both,Both+attr(Both,"match.length"))
Symbol
Capital<-regexpr("[A-Z]+",company)
capital<-regexpr("[A-Z]+",company)
capital
name<-substring(company,capital,capital+attr(Both,"match.length"))
name
capital<-regexpr("[A-Z]+|[A-Z]+",company)
capital
name<-substring(company,capital,capital+attr(Both,"match.length")-1)
name
Symbol<-substring(company,Both,Both+attr(Both,"match.length")-1)
Symbol
library(reshape2)
library(reshape)
colsplit(company," ",c("Symbol","Company Name"))
colsplit(company," ",c("Symbol","Company Name"))
Both
capital<-regexpr("[A-Z]+|[A-Z][a-z]+",company)
capital
Find<-regexpr("[A-Z][a-z]+",company)
Find
Res=substring(company,Find,Find+attr(Find,"match.length")-1)
Res
Find<-regexpr("[A-Z][a-z] +",company)
Find
Find<-regexpr("[A-Z][a-z] [A-Z][a-z]+",company)
Find
Find<-regexpr("[A-Z][a-z]+[A-Z][a-z]+",company)
Find
Find<-regexpr("[A-Z][a-z][A-Z][a-z]+",company)
Find
Find<-regexpr("^[A-Z][a-z]+",company)
Find
company
Symbol<-substring(company,Both+attr(Both,"match.length")-1)
Symbol
Symbol<-substring(company,Both+attr(Both,"match.length"))
Symbol
Symbol<-substring(company,Both+attr(Both,"match.length")+1)
Symbol
CompanyName<-substring(company,Both+attr(Both,"match.length")+1)
CompanyName
symbol<-substring(company,Both,Both+attr(Both,"match.length")-1)
symbol
totalTable<-NULL
totalTable
totalTable$company<-NULL
totalTable
totalTable <- rbind(page1,page2)
totalTable
totalTable
totalTable$Company<-NULL
totalTable
totalTable$symbol<-symbol
totalTable
totalTable[,1]<-symbol
totalTable
totalTable <- rbind(page1,page2)
totalTable
totalTable$Company<-Companyname
totalTable
totalTable$Company<-CompanyName
totalTable
symbol
symbol(header="Symbol")
Symbol<-symbol(header="Symbol")
Symbol<-c(symbol,header="Symbol")
symbol
Symbol
newtable<-cbind(symbol)
newtable
totalTable <- rbind(page1,page2)
totalTable
company<-totalTable$Company
company
CompanyName<-substring(company,Both+attr(Both,"match.length")+1)
CompanyName
symbol<-substring(company,Both,Both+attr(Both,"match.length")-1)
symbol
totalTable$Company<-CompanyName
totalTable
newtable<-cbind(symbol,totalTable)
newtable
Both<-regexpr("[A-Z]+|[a-z]+",company)
Both
newtable
symbol
CompanyName<-substring(company,Both+attr(Both,"match.length")-1)
CompanyName
CompanyName<-substring(company,Both+attr(Both,"match.length")+1)
CompanyName
newtable
Both<-regexpr("[A-Z]+|[a-z]+",company)
Both
CompanyName<-substring(company,Both+attr(Both,"match.length")+1)
CompanyName
symbol<-substring(company,Both,Both+attr(Both,"match.length")-1)
symbol
CompanyName
symbol<-substring(company,Both,Both+attr(Both,"match.length")-1)
company
Both
symbol
Both
totalTable$Price<-numPrice
totalTable
newTable$Price<-numPrice
newtable$Price<-numPrice
newtable
newtable$YTDchang<-numYTDchange
newtable
newtable$YTDchange<-numYTDchange
newtable
newtable$YTDchange<-NULL
newtable
library(XML)
Sys.time()
## 1) Creating two variables that are sampled from a uniform 0 1 distribtuon (Just generating some data)
cyurl="http://money.cnn.com/data/markets/dow/?order=d"
cyurl.table = readHTMLTable(cyurl, which=4)
cyurl.table
page1 <- cyurl.table
page1
page2 <- readHTMLTable("http://money.cnn.com/data/markets/dow/?order=d&page=2", header = T)[[4]]
page2
totalTable <- rbind(page1,page2)
totalTable
header <- head(totalTable)
header
dimension <- dim(totalTable)
dimension
##2) Describe the structure and class of each element of this list.
## According to the dimension result, this list has 30 rows and 7 columns in total.
class(totalTable)
## The list is a data.frame.
class(totalTable[,2])
class(totalTable[2,])
class(totalTable[5,])
class(totalTable[1,])
class(totalTable[,1])
class(totalTable$Price)
class(totalTable[2,2])
class(totalTable[2,3])
totalTable[2,6]
class(totalTable[2,6])
## Each column is a factor, and each row is a data.frame.
## 3) If you were asked to do an analysis on the year to date change and the stock price, what would be the problem you would encounter?  How can you address it?  Address this problem within your code.
YTDchange<-totalTable$YTDchange
YTDchange
mean(YTDchange)
##I got an warning message while testing the mean of the YTDchange: "argument is not numeric or logical: returning NA."
##So I should get rid of redundant symbol like "%".
numYTDchange<-as.numeric(gsub("[\\%,]","",YTDchange))
numYTDchange
mean(numYTDchange)
##Then I can calculate the mean of the column very well. If I need calculate on a price column. I might have the $ sign as a problem, so I need get rid of it too.
Price<-totalTable$Price
Price
mean(Price)
#Same warning: In mean.default(Price) : argument is not numeric or logical: returning NA.
numPrice<-as.numeric(gsub("[\\$,]","",Price))
numPrice
mean(numPrice)
#Now I can calculate the price and YTDchange very well.
## 4) Separate the Stock Symbol from the Stock Price, store it in two different variables.  Make sure to address any issues with volume that you may encounter.
company<-totalTable$Company
company
Both<-regexpr("[A-Z]+|[a-z]+",company)
Both
CompanyName<-substring(company,Both+attr(Both,"match.length")+1)
CompanyName
symbol<-substring(company,Both,Both+attr(Both,"match.length")-1)
symbol
totalTable$Company<-CompanyName
newtable<-cbind(symbol,totalTable)
newtable
newtable$Price<-numPrice
newtable
newtable$YTDchange<-numYTDchange
newtable
newtable$YTDchange<-NULL
newtable
## Another try reshape package---fail
library(reshape)
colsplit(company," ",c("Symbol","Company Name"))
## Another try gsub
## 5) In your "own" words, describe the difference between a vector, matrix, list, and data frame in R.
A vector is a sequence of data with the same basic type. The will all be number, or string, or logical values.
A matrix is a group of data organized in two dimensions.But like vector, it also has the same type of data.
A list is a group of data with anything, any type of data. It is the most flexible.
Data frame is a kind of list. It is a list that looks like a matrix, which means it has two dimensions. The columns can be different types of data.
source('~/.active-rstudio-document', echo=TRUE)
setwd("~/")
getwd()
setwd("~/Desktop/2015Fall_d3/theopenwindow/Week12/data")
getwd()
u5mr<-read.csv("median-U5MRbyCountry.csv",header=T)
dim(u5mr)
head(u5mr)
change<-u5mr[c("Samoa")]
change<-subset(u5mr, u5mr$Country=="Samoa")
change
u5mr<-read.csv("mort_Indicator.csv",header=T)
dim(u5mr)
head(u5mr)
change<-subset(u5mr, u5mr$Country=="Samoa",)
change
change<-subset(u5mr, u5mr$Country=="Samoa",)
change
change<-subset(u5mr, u5mr$countryName=="Samoa",)
change
change<-subset(u5mr, u5mr$countryName=="Samoa","Korea, Dem. Rep.")
change<-subset(u5mr, u5mr$countryName=="Bangladesh","Burkina Faso")
change
change<-subset(u5mr, u5mr$countryName=="Bangladesh")
change
Samoa<-subset(u5mr, u5mr$countryName=="Samoa")
Samoa
Korea, Dem. Rep.<-subset(u5mr, u5mr$countryName=="Korea, Dem. Rep.")
Korea, Dem. Rep.
Korea Dem Rep.<-subset(u5mr, u5mr$countryName=="Korea Dem Rep")
KoreaDemRep<-subset(u5mr, u5mr$countryName=="Korea Dem Rep")
KoreaDemRep
KoreaDemRep<-subset(u5mr, u5mr$countryName=="Korea Dem Rep")
KoreaDemRep
KoreaDemRep<-subset(u5mr, u5mr$countryName=="KoreaDemRep")
KoreaDemRep
KoreaDemRep<-subset(u5mr, u5mr$countryName=="Haiti")
Haiti
dim(u5mr)
head(u5mr)
Haiti<-subset(u5mr, u5mr$countryName=="Haiti")
Haiti
change<rbind(Haiti,Samoa)
dim(u5mr)
